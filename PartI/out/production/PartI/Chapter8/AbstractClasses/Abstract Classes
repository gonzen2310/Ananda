* There are situation in which you will want to define a SUPERCLASS that
declares the STRUCTURE of a given ABSTRACTION without providing a complete
implementation of every method
    - Sometime you will want to create a SUPERCLASS that only DEFINES a
      generalized form that will be shared by all of its subclasses, leaving
      it to each to fill in the DETAILS.
* Such a CLASS determines the NATURE of the methods that the SUBCLASSES mush implement
* One way this situation can occur is when a SUPERCLASS is unable to create a
  meaningful implementations for a METHOD
* It is not uncommon for a METHOD ot have NO meaningful definition in the context
  of its SUPERCLASS
* An Abstract methods is also called "SUBCLASSER RESPONSIBILITY" because they have
  no implementation specified in the SUPERCLASS
    - Then a SUBCLASS must override them
* General Form:
    abstract type name(parameter-list); // No method body is presented
* Any CLASS that contains one or more ABSTRACT METHODS must also be declared
  ABSTRACT
!!!IMPORTANT: There can be NO objects of and ABSTRACT CLASS
An ABSTRACT CLASS cannot be directly instantiated with the new operator
(Such Object would be useless, because an ABSTRACT CLASS is not fully defined"
Also, you CANNOT declare ABSTRACT CONSTRUCTORS, or ABSTRACT STATIC METHODS